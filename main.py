
import os
from dotenv import load_dotenv
import telebot
from controllers import save_password_in_db, get_password_in_db, delete_password2, register_user, login_user

# Load environment variables
load_dotenv()
TOKEN = os.getenv("7115003435:AAF9uJGIMTNxqBJp6NvS6q_D52zRZ0Vi3Rs")
bot = telebot.TeleBot(TOKEN)

# Create reply keyboard for user interaction
keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
button_1 = telebot.types.KeyboardButton('üîó–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üîó')
button_2 = telebot.types.KeyboardButton('üìì–í–∑—è—Ç—å –ø–∞—Ä–æ–ª—åüìì')
button_3 = telebot.types.KeyboardButton('üóë—É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—åüóë')
button_4= telebot.types.KeyboardButton('üìÑ—Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤üìÑ')
keyboard.add(button_1, button_2, button_3,button_4)

# Handle the /start command to welcome users
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(
        message.chat.id, 
        '–ü—Ä–∏–≤–µ—Ç, —è –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π! –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.',
        reply_markup=keyboard
    )

# Fetch and display saved passwords for the user
def get_password_from_db(message):
    passwords = get_password_in_db(message.from_user.id)
    if passwords:
        for password in passwords:
            bot.send_message(message.chat.id, f"–°–∞–π—Ç: {password[0]}\n–ü–∞—Ä–æ–ª—å: ||{password[1]}||\nURL: {password[2]}",parse_mode='MarkdownV2')
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.")
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)

def list_sites(message):
    passwords = get_password_in_db(message.from_user.id)
    if passwords:
        sites_list = "\n".join([f"{i+1}. {p[0]}" for i, p in enumerate(passwords)])
        bot.send_message(message.chat.id, f"–í–∞—à–∏ —Å–∞–π—Ç—ã:\n{sites_list}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤.")
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)
    

# Guide user through deleting a password
def delete_password_from_db(message):
    passwords = get_password_in_db(message.from_user.id)
    if passwords:
        password_list = "\n".join([f"{i+1}. {p[0]}" for i, p in enumerate(passwords)])
        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ä–æ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n{password_list}")
        bot.register_next_step_handler(message, confirm_delete, passwords)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–æ–ª–µ–π.")
        bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)

# Confirm deletion of the selected password
def confirm_delete(message, passwords):
    try:
        index = int(message.text) - 1
        if 0 <= index < len(passwords):
            password_to_delete = passwords[index]
            bot.send_message(message.chat.id, f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞ {password_to_delete[0]}? (–¥–∞/–Ω–µ—Ç)")
            bot.register_next_step_handler(message, yes_no, password_to_delete)
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)

# Handle user confirmation or cancellation of deletion
def yes_no(message, password_to_delete):
    if message.text.lower() == '–¥–∞':
        delete_password2(message.from_user.id, password_to_delete[0])
        bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞ {password_to_delete[0]} —É–¥–∞–ª–µ–Ω.")
    else:
        bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=keyboard)

# Main text message handler for user actions
@bot.message_handler(content_types=['text'])
def handle_text_message(message):
    if 'üîó–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å üîó' in message.text:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞, –ø–∞—Ä–æ–ª—å –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):')
        bot.register_next_step_handler(message, save_password_in_db, bot=bot, k=keyboard)
    elif 'üìì–í–∑—è—Ç—å –ø–∞—Ä–æ–ª—åüìì' in message.text:
        bot.send_message(message.chat.id, '–í–æ—Ç –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏:')
        get_password_from_db(message)
    elif 'üóë—É–¥–∞–ª–∏—Ç—å –ø–∞—Ä–æ–ª—åüóë' in message.text:
        delete_password_from_db(message)
    else:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.', reply_markup=keyboard)

# Start the bot polling loop
bot.polling(non_stop=True, interval=1)
